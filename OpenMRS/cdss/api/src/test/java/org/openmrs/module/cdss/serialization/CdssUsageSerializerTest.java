package org.openmrs.module.cdss.serialization;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import org.junit.Test;
import org.openmrs.module.cdss.api.data.CdssUsage;
import org.openmrs.module.cdss.api.serialization.CdssUsageSerializer;

import java.time.LocalDateTime;

import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertThat;

public class CdssUsageSerializerTest {


    @Test
    public void typical() throws JsonProcessingException {
        ObjectMapper mapper = new ObjectMapper();
        SimpleModule simpleModule = new SimpleModule();
        simpleModule.addSerializer(CdssUsage.class, new CdssUsageSerializer());
        mapper.registerModule(simpleModule);

        CdssUsage usage = new CdssUsage(
                "HPV",
                "1",
                LocalDateTime.of(2024, 1, 1, 1, 1, 1),
                "HPV_Rule_1",
                "Recommendation1",
                "Recommendation2",
                "Recommendation3",
                "Recommendation4",
                "Recommendation5",
                "Recommendation6",
                "ACTED");


        String actual = mapper.writeValueAsString(usage);
        String expected = "{\"vaccine\":\"HPV\",\"patientId\":\"1\",\"timestamp\":[2024,1,1,1,1,1],\"rule\":\"HPV_Rule_1\",\"recommendations\":[{\"priority\":1,\"recommendation\":\"Recommendation1\"},{\"priority\":2,\"recommendation\":\"Recommendation2\"},{\"priority\":3,\"recommendation\":\"Recommendation3\"},{\"priority\":4,\"recommendation\":\"Recommendation4\"},{\"priority\":5,\"recommendation\":\"Recommendation5\"},{\"priority\":6,\"recommendation\":\"Recommendation6\"}],\"status\":\"ACTED\",\"uuid\":null}";
        assertThat(actual, is(expected));
    }


//// Generated by CodiumAI
//
//import org.openmrs.module.cdss.api.serialization.CdssUsageSerializer;
//
//import org.junit.Test;
//import static org.junit.Assert.*;


    // Serializes a CdssUsage object to a JSON string with all fields included
    @Test
    public void test_serialize_all_fields_included() throws JsonProcessingException {
        ObjectMapper mapper = new ObjectMapper();
        SimpleModule simpleModule = new SimpleModule();
        simpleModule.addSerializer(CdssUsage.class, new CdssUsageSerializer());
        mapper.registerModule(simpleModule);

        // Arrange
        CdssUsageSerializer serializer = new CdssUsageSerializer();
        CdssUsage cdssUsage = new CdssUsage("vaccine", "patientId", "rule", LocalDateTime.of(2022,1,1,0,0,0), "recommendation1", "status");
        String expectedJson = "{\"vaccine\":\"vaccine\",\"patientId\":\"patientId\",\"timestamp\":[2022,1,1,0,0,0],\"rule\":\"rule\",\"recommendations\":[{\"priority\":1,\"recommendation\":\"recommendation1\"}],\"status\":\"status\",\"uuid\":null}";

        // Act
        String actualJson = mapper.writeValueAsString(cdssUsage);

        // Assert
        assertEquals(expectedJson, actualJson);
    }

    // Handles null values for the recommendation fields
    @Test
    public void test_serialize_null_recommendations() throws JsonProcessingException {
        ObjectMapper mapper = new ObjectMapper();
        SimpleModule simpleModule = new SimpleModule();
        simpleModule.addSerializer(CdssUsage.class, new CdssUsageSerializer());
        mapper.registerModule(simpleModule);

        // Arrange
        CdssUsage cdssUsage = new CdssUsage("vaccine", "patientId", "rule", LocalDateTime.of(2022,1,1,0,0,0), null, "status");
        String expectedJson = "{\"vaccine\":\"vaccine\",\"patientId\":\"patientId\",\"timestamp\":[2022,1,1,0,0,0],\"rule\":\"rule\",\"recommendations\":[],\"status\":\"status\",\"uuid\":null}";

        // Act
        String actualJson = mapper.writeValueAsString(cdssUsage);

        // Assert
        assertEquals(expectedJson, actualJson);
    }


}
